;This file contains the code which iterates for every pixel in the bitmap


    MODULE Iterator

Working_X = $80D0   ;Initially copies of Current_X / Current_Y
Working_Y = $80D2   ; Are used each iteration as Z_(-1)

Next_X = $80D4  ;These are used to work out the new x/y positions
Next_Y = $80D6  ;Once calculated, these are moved into copy places for next iteration

X2 = $80D8  ;X^2
Y2 = $80DB  ;Y^2    2 bytes as upper nybble can be ignored here - result <= $6400 from X^2

Iteration = $80DE   ;Iteration counter

Temp_Space = $80F0  ;16 bytes free for general purpose


/*
    General Proc:

    Z_1 = Z_0^2 + XY

    X' = X^2 - Y^2 + X0

    Y' = 2*X*Y + Y0

    Start calculations 'after' first iteration - Z1 = 0+0j + X+Yj, so Z1 = X+Yj
    For very large coordinates, this immediately rejects them

    Method:

        - Calculate X2 and Y2 from current screen coords (skips first iteration)

    +---> Check if X2 + Y2 > 4
    |     +-> If yes, exit and return iteration number (always 1+)
    |   - Next_X = X2 - Y2 + Current_X
    |   - Next_Y = ((X*Y) << 2) + Current_Y
    |   - Increment iteration counter
    |   - Check if iteration number > _MAX_ITERATIONS
    |     +-> If yes, exit and return iteration number (_MAX_ITERATIONS)
    |   - Calculate X2 and Y2   ; Just hear to even the look of this bit
    +---- Loop

*/

Init

    ld a, 2
    out (254), a  ;Set border colour Red    (Shows program working)

    xor a   ;Initialise iteration counter to 0
    push af ;Push to stack

    ld hl, (Current_X)
    ld (Working_X), hl
    ld bc, hl

    ld hl, (Current_Y)
    ld (Working_Y), hl  ;Make a copy of X&Y

Calc_X2

    ld a, 5
    out ($FE), a    ;Cyan border

    call Fast_Square.Start    ;Calculates X^2, returns result in BC (and A)

    bit 6, b  ;Check if X2 > 4
    jr nz, Exit  ;If X2 > 4, ans >= 0

    push bc
    push bc

Calc_Y2

    ld bc, (Working_Y)

    ld a, 2
    out ($FE), a    ;Red Border

    call Fast_Square.Start    ;Calculates Y^2, returns result in BC (and A)

    bit 6, b  ;Check if Y2 > 4
    jr z, Check_Radius  ;If Y2 > 4, ans >= 0 
Exit_2pop

    pop af
    pop af

    xor a
    out (254), a  ;Set border colour Black  (Shows program working)
    
    pop af

    jp Calculate.Determine_Pixel_State ;Number of iterations returned in a    

Check_Radius

;   Calculate X2 + Y2
;   Then to show if R > 4, subtract $4000, then $0001
;   If R' >= 0, R > 4, so exit

;   No 3rd byte needed as most extreme case is within range of numbers

    pop hl

    add hl, bc  ;hl = X2 + Y2
    bit 6, h    ;Slightly faster test of size

    jp z, Calc_Next_X

Exit_1pop

    pop af

    xor a
    out (254), a  ;Set border colour Black  (Shows program working)
    
    pop af

    jp Calculate.Determine_Pixel_State ;Number of iterations returned in a  

Calc_Next_X

    pop hl

    or a
    sbc hl, bc  ;hl = X2 - Y2

    ld bc, (Current_X)
    add hl, bc  ;hl = Next_X

    ld a, h
    cp $20  ;Check if Next_X > 2
    jp p, Exit  ;If Next_X^2 > 4, next X2 + Y2 >= 4
;   Above check skips multiplication below

Calc_Next_Y

    ld (Next_X), hl

    ld bc, (Working_X)
    ld de, (Working_Y)

    ld a, 7
    out ($FE), a    ;White Border

    call Table_Mult.Start

;   bc holds answers

    sla c
    rl b    ;bc = 2 * X * Y + Y0

    ld hl, (Current_Y)
    add hl, bc  ;hl = Next_Y

    ld a, h
    cp $20  ;Check if Next_Y > 2
    jp p, Exit  ;If Next_Y^2 > 4, next X2 + Y2 >= 4

Move_Next_Working_Coords

    ld (Working_Y), hl

    ld hl, (Next_X)
    ld (Working_X), hl  ;Working X/Y ready for next iteration
    ld bc, hl   ;Saves redundant memory read

Count_Iterations

    pop af
    inc a
    ld d, a
    ld a, (Max_n)
    cp d
    ld a, d
    push af

    jp nz, Calc_X2

Exit

;   Iterations = 51 - b

    ld a, 4
    out (254), a  ;Set border colour Black  (Shows program working)
    
    pop af

    jp Calculate.Determine_Pixel_State  ;Number of iterations returned in a


    ENDMODULE