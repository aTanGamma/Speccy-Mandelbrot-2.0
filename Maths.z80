; This file contains maths functions

    MODULE Byte_Plotter
Start
;   Plots a given byte to the screen at a given line and byte no.

;   Inputs: a = byte to plot
;           b = X (Byte on screen)
;           c = Y (Scanline)

;   Constructs screen address into hl

    push af  ;Push a for safekeeping
    
    ld a, c 
    and %00111000   ;Extract Y5,4,3
    .2 rla   ;Shift to top of byte
    add b   ;Low-byte finished
    ld l, a ; l holds final value

    ld a, c
    and %00000111   ;Extract Y2,1,0
    ld b, a ;Half finished
    
    ld a, c
    and %11000000   ;Extract Y7,6
    .3 rra   ;Move to correct position
    add b   ;All X/Y bits in place
    or %01000000   ;Finish by putting upper bits in
    ld h, a ;Finished address in hl

    pop af   ;Return a

    ld (hl), a    ;store byte in

    ret

    ENDMODULE


    MODULE Plot_Character
Start

;   Set bc to Font Data
;   Set de to Character position, [y][x]

Get_Byte_Position
    
    ld a, d ;X position left as is
    .5 sla a
    or e
    ld e, a ;put lowest 3 bits of line no. into position

    ld a, %00011000
    and d   ;Extract highest bits of position
    or %01000000
    ld d, a ;hl holds pointer to top left of character

Plot_Bytes

    ld a, (bc)
    ld (de), a
    inc c
    inc d

    ld a, (bc)
    ld (de), a
    inc c
    inc d

    ld a, (bc)
    ld (de), a
    inc c
    inc d

    ld a, (bc)
    ld (de), a
    inc c
    inc d

    ld a, (bc)
    ld (de), a
    inc c
    inc d

    ld a, (bc)
    ld (de), a
    inc c
    inc d

    ld a, (bc)
    ld (de), a
    inc c
    inc d

    ld a, (bc)
    ld (de), a
    inc c
    inc d

    ret

    ENDMODULE

    MODULE Table_Mult   ;Uses a table to speed up multiplications
;   Multiplies using Quarter Squares in a table
/*---------= Variables =---------*/
Num_A = $8040   ;2-bytes
Num_B = $8042   ;2-bytes

Result = $8044  ;4-bytes

No_Negs = $8048 ;Byte to determine the sign of ans

SumTable = $9000
DiffTable = $9400

/*---------= Code =---------*/

Start

    xor a

    ld l, a     ;L will count the number of negative numbers in the next bit
    
Sign_Check_bc   ;Note: A = 0 still

    bit 7, b    ;Check if bc negative; If bit 7 set, Z = 0
    jp z, Sign_Check_de

    inc l       ;Count 1 negative number

    ld a,b
    cpl
    ld b, a ;Get complement of b

    ld a,c
    cpl
    ld c, a ;Get complement of c

    inc bc      ;Just adds 1 (properly) to bc

Sign_Check_de

    bit 7, d    ;Check if de negative
    jp z, 1F

    inc l       ;Count 1 negative number

    ld a, d
    cpl
    ld d, a

    ld a, e
    cpl
    ld e, a     ;get complement of de

    inc de      ;Just adds 1 (properly) to bc

1   push hl ;Put # negatives on stack

    ld (Num_A), bc
    ld (Num_B), de

AaCc_Mult

    ld c, 0 ;Get pointer into SumTable
    ld a, b
    or a
    jr nz, 1F

    ld hl, 0
    push hl
    jr AaDd_Mult

1
    ld a, d
    or a
    jr nz, 1F
    
    ld hl, 0
    push hl
    jr AaDd_Mult
1
    add b   ;$Aa + $Cc

    jr nc, 1F
    inc c
1
    sla a
    rl c    ;Double index b/c 16-bit numbers
    
    ld l, a ;Finalised pointer into SumTable
    ld a, $90
    add c
    ld h, a

    ld c, (hl)
    inc hl
    ld b, (hl)  ;Put (little endian) answer into bc

    ld e, 0 ;Get pointer into DiffTable
    ld a, (Num_A+1)
    ld l, a
    ld a, d

    sub l   ;Get A-B
    jr nc, 2F   ;If borrow (carry flag), make -ve

    neg ;negate a
2
    sla a
    rl e
    
    ld l, a
    ld a, $94
    add e
    ld h, a
    
    ld e, (hl)
    inc l
    ld d, (hl)  ;Put ((A-B)^2)/4 in de

    ld hl, bc
    
    or a
    sbc hl, de  ;Aa * Cc now in hl

    ;ld (Mid_0), hl  ;Put Aa * Cc into Mid_0 for later
    push hl
    
AaDd_Mult

    ld c, 0   ;Get pointer into SumTable
    ld a, (Num_A+1)

    or a
    jr nz, 1F

    ld hl, 0
    push hl
    jr BbCc_Mult
1
    ld l, a
    ld a, (Num_B)

    or a
    jr nz, 1F

    ld hl, 0
    push hl
    jr BbCc_Mult
1
    or a
    add l   ;$Aa + $Dd
    jr nc, 1F

    inc c
1
    sla a
    rl c    ;Double index b/c 16-bit numbers
    
    ld l, a ;Finalised pointer into SumTable
    ld a, $90
    add c
    ld h, a

    ld c, (hl)
    inc hl
    ld b, (hl)  ;Put (little endian) answer into bc

    ld e, 0   ;Get pointer into DiffTable
    ld a, (Num_A+1)
    ld l, a
    ld a, (Num_B)

    sub l   ;Get A-B
    jr nc, 2F   ;If borrow (carry flag), make -ve

    neg
2
    sla a
    rl e
    
    ld l, a
    ld a, $94
    add e
    ld h, a
    
    ld e, (hl)
    inc l
    ld d, (hl)  ;Put ((A-B)^2)/4 in de

    ld hl, bc
    
    or a
    sbc hl, de  ;Aa * Cc now in hl

    push hl  ;Put Aa * Dd into Mid_1 for later

BbCc_Mult

    ld c, 0   ;Get pointer into SumTable
    ld a, (Num_A)

    or a
    jr nz, 1F

    ld hl, 0
    push hl
    jr BbDd_Mult

1
    ld l, a
    ld a, (Num_B+1)

    or a
    jr nz, 1F

    ld hl, 0
    push hl
    jr BbDd_Mult

1
    or a
    add l   ;$Bb + $Cc
    jr nc, 1F

    inc c
1
    sla a
    rl c    ;Double index b/c 16-bit numbers
    
    ld l, a ;Finalised pointer into SumTable
    ld a, $90
    add c
    ld h, a

    ld c, (hl)
    inc hl
    ld b, (hl)  ;Put (little endian) answer into bc

    ld e, 0   ;Get pointer into DiffTable
    ld a, (Num_A)
    ld l, a
    ld a, (Num_B+1)

    sub l   ;Get A-B
    jr nc, 2F   ;If borrow (carry flag), make -ve

    neg
2
    sla a
    rl e
    
    ld l, a
    ld a, $94
    add e
    ld h, a
    
    ld e, (hl)
    inc l
    ld d, (hl)  ;Put ((A-B)^2)/4 in de

    ld hl, bc
    
    or a
    sbc hl, de  ;Bb * Cc now in hl

    push hl  ;Put Bb * Cc into Mid_1 for later


BbDd_Mult

    ld c, 0 ;Get pointer into SumTable
    ld a, (Num_A)

    or a
    jr nz, 1F

    ld hl, 0
    jr Sum_Temp_Answers

1
    ld l, a
    ld a, (Num_B)

    or a
    jr nz, 1F

    ld hl, 0
    jr Sum_Temp_Answers

1
    or a
    add l   ;$Bb + $Dd
    jr nc, 1F

    inc c
1
    sla a
    rl c    ;Double index b/c 16-bit numbers
    
    ld l, a ;Finalised pointer into SumTable
    ld a, $90
    add c
    ld h, a

    ld c, (hl)
    inc hl
    ld b, (hl)  ;Put (little endian) answer into bc

    ld e, 0   ;Get pointer into DiffTable
    ld a, (Num_A)
    ld l, a
    ld a, (Num_B)

    sub l   ;Get A-B
    jr nc, 2F   ;If borrow (carry flag), make -ve

    neg
2
    sla a
    rl e
    
    ld l, a
    ld a, $94
    add e
    ld h, a
    
    ld e, (hl)
    inc l
    ld d, (hl)  ;Put ((A-B)^2)/4 in de

    ld hl, bc
    
    or a
    sbc hl, de  ;Bb * Dd now in hl
    ex de, hl
    
Sum_Temp_Answers

    ld a, 0 ;keeps track of carries to highest byte

    pop hl
    pop bc

    add hl, bc  ;Add 2^8s together
    jr nc, 1F

    inc a   ;Carry to top
1
    ld c, d
    ld b, 0

    add hl, bc

    ld d, l ;Bottom 2 bytes finished
    ld l, h
    ld h, 0
    pop bc

    adc hl, bc  ;Add on top byte (plus previous carry)
    add l   ;Add on previous carries
    ld l, a
    jr nc, 3F   ;Add on first carry if needed

    inc h
3   
    ld bc, hl   ;Finished answer in bcde

Shift_Anwser
   
    sla e   ;Shift answer up by 4 bytes to isolate useful bits
    rl d
    rl c
    rl b

    sla e
    rl d
    rl c
    rl b

    sla e
    rl d
    rl c
    rl b

    sla e
    rl d
    rl c
    rl b

Fix_Sign

    pop hl
    sra l

    jr nc, Return_Ans

    ld a, b
    cpl
    ld b, a

    ld a, c
    cpl
    ld c, a

    inc bc  ;Answer in bc now fully ready

Return_Ans

    ld a, 1
    out (254), a  ;Set border colour Blue  (Shows program working)

    ret

    ENDMODULE

    MODULE Fast_Square  ;Pass in number in bc

/*---------= Variables =---------*/

Result = $8040  ;4-bytes

Lo_Byte = $8044
Hi_Byte = $8045

A2 = $8046
B2 = $8048

SumTable = $9000
DiffTable = $9400
SuareTable = $9800

/*---------= Code =---------*/

Start


Make_Num_Pos

    bit 7, b
    jr z, Get_A2

    ld a, b
    cpl
    ld b, a

    ld a, c
    cpl
    ld c, a

    inc bc  ;Make number +ve

Get_A2

    ld h, $98
    
    ld a, b ;Use b for offset into square table

    or a
    jr nz, 1F

    ld hl, 0
    push hl
    jp Get_B2

1
    sla a   ;Double for 16-bit values
    jr nc, 2F
    inc h
2
    ld l, a
    
    ld a, (hl)  ;Get lo-byte
    ld e, a ;Put in e
    inc l
    ld a, (hl)  ;Get Hi-byte
    ld d, a ;Put in d
    ld hl, de
    push hl ;Store to A^2


Get_B2
    ld h, $98

    ld a, c
    
    or a
    jr nz, 1F

    ld hl, 0
    push hl
    jp Get_Sum_AB

1
    sla a
    jr nc, 2F
    inc h
2
    ld l, a
    
    ld a, (hl)
    ld e, a
    inc l
    ld a, (hl)
    ld d, a
    ld hl, de
    push hl ;As above for B^2

Get_Sum_AB

    ld hl, $9000
    ld de, 0
    ld a, b
    add c
    jr nc, 1F
    inc d
1
    ld e, a
    sla e
    rl d

    add hl, de  ;Get final pointer for Aa+Bb

    ld a, (hl)
    ld e, a
    inc hl
    ld a, (hl)
    ld d, a

Get_Diff_AB

    ld hl, $9400

    ld a, b
    sub c
    ld bc, 0    ;Finally don't need bc any more
    jr nc, 1F

    neg
1
    ld c, a
    sla c
    rl b    ;Double pointer

    add hl, bc
    
    ld a, (hl)
    ld c, a
    inc hl
    ld a, (hl)
    ld b, a

    ld hl, de
    or a
    sbc hl, bc  ;Get AB

    sla l
    rl h    ;Double middle bytes

Compile_Ans

                ;hl = 2AB
    pop de ;de = B^2

    ld a, l
    add d   ;a = Byte 2
    jr nc, 1F
    inc h
1
    ld d, a ;de = Lowest 2 bytes of result

    pop bc ;bc = A^2
    ld a, h

    add c
    jr nc, 1F
    inc b
1
    ld c, a ;bc = Top short
    
Shift_Ans

    sla e
    rl d
    rl c
    rl b

    sla e
    rl d
    rl c
    rl b

    sla e
    rl d
    rl c
    rl b

    sla e
    rl d
    rl c
    rl b    ;Shift answer up

Return_Ans

    ld a, 1
    out ($FE), a

    ret ;return answer in bc

    org $9000
    INCBIN "./QuarterSquare_Table.bin"

    org $9800
    INCBIN "SquareTable.bin"

    ENDMODULE