; This file contains maths functions
    
    
    MODULE Long_Multiply  ;16-bit multiplication. Multiplies bc (Num A) by de (Num B) (Setup before-hand); Returns Result in BC (and A)

/*---------= Variables =---------*/

Num_A = $5D00   ;4-bytes to allow for shifting left

Result = $5D04  ;4-byte result

No_Negs = $5D08

/*---------= Code =---------*/

Start

    ld a, 0
    ld hl, Num_A

    ld (hl), a
    inc l
    ld (hl), a  ;Clear Hi-bytes of Num_A
    .3 inc l    ;Increment pointer to Result

    ld (hl), a
    inc l
    ld (hl), a
    inc l
    ld (hl), a
    inc l
    ld (hl), a  ;Cleared Result

    ld l, 0     ;L will count the number of negative numbers in the next bit
    
Sign_Check_bc   ;Note: A = 0 still

    bit 7, b    ;Check if bc negative; If bit 7 set, Z = 0
    jr z, Sign_Check_de

    inc l       ;Count 1 negative number

    ld a, $FF   ;Setup value to xor with

    xor b       ;xor with FF (get complement)
    ld b, a     ;Return comp to b

    ld a, $FF     ;As above for c
    xor c
    ld c, a

    inc bc      ;Just adds 1 (properly) to bc

Sign_Check_de

    bit 7, d    ;Check if de negative
    jr z, Setup_Memory

    inc l       ;Count 1 negative number

    ld a, $FF   ;Setup value to xor with

    xor d       ;xor with FF (get complement)
    ld d, a     ;Return comp to b

    ld a, $FF     ;As above for c
    xor e
    ld e, a

    inc de      ;Just adds 1 (properly) to bc

Setup_Memory

    ld a, l
    ld (No_Negs), a ;Store number of negative numbers in memory

    ld (Num_A+2), bc    ;Put bc in Num_a

    ld b, 16    ;Set loop counter

R_Shift_de

    push bc ;Counter -> Stack

    srl d
    rr e    ;d >> Carry (= d0) >> e >> Carry (= e0)

    jr nc, L_Shift_NumA

Add_NumA
    
    or a    ;Clear flags

    ld bc, (Num_A+2)
    ld hl, (Result+2)

    add hl, bc  ;Add low-bytes of R and A together

    ld (Result+2), hl

    ld bc, (Num_A)
    ld hl, (Result)

    adc hl, bc  ;Add Hi-Bytes of R and A

    ld (Result), hl


L_Shift_NumA


;   Shifts A left using bc instead of a and hl - slightly faster and neater


    ld bc, (Num_A+2)
    sla c
    rl b

    ld (Num_A+2), bc

    ld bc, (Num_A)
    rl c
    rl b

    ld (Num_A), bc


Check_Loop_Counter

    pop bc  ;Restore bc from stack

    djnz R_Shift_de ;Dec loop counter and loop if b != 0

Shift_Result

    ;Now need to divide result by 2^12 (Move down by 4 bits and only take middle 2 bytes in BC)

    ;Return result in bc and highest nibble in A

    ld hl, Result
    ld b, (hl)
    inc l
    ld d,(hl)
    inc l
    ld e, (hl)
    inc l
    ld c, (hl)  ;Now Result is stored, in order in reg. dbce (weird order to return answer easier)

    sra d
    rr b
    rr c
    rr e    ;1

    sra d
    rr b
    rr c
    rr e    ;2
    
    sra d
    rr b
    rr c
    rr e    ;3
    
    sra d
    rr b
    rr c
    rr e    ;4

;   Much quicker than previous method using RAM, hl & a (+ no loops required)
;   bc already contains answer, just needs to be negated or not

Adjust_Result_Sign

    ld a, (No_Negs)
    or a
    rra   ;If there were an odd number of negative numbers, negate answer

    jr nc, Return_Answers    ;Jump if not negating


    ld a, $FF
    xor b
    ld b, a

    ld a, $FF
    xor c
    ld c, a ;Invert bc

    inc bc  ;Add 1 to bc


;   Skip returning d'+C as unnecessary

;   Now Result = R'+1 = -R (except top byte)

Return_Answers

;   bc already contains answer
;   a already contains hi-byte

;   a holds true highest-byte of answer, +ve or -ve
;   bc holds small units and fractional part



    ret ;Exit once finished


    ENDMODULE

    MODULE Byte_Plotter
Start
;   Plots a given byte to the screen at a given line and byte no.

;   Inputs: a = byte to plot
;           b = X (Byte on screen)
;           c = Y (Scanline)

;   Constructs screen address into hl

    push af  ;Push a for safekeeping
    
    ld a, c 
    and %00111000   ;Extract Y5,4,3
    .2 rla   ;Shift to top of byte
    add b   ;Low-byte finished
    ld l, a ; l holds final value

    ld a, c
    and %00000111   ;Extract Y2,1,0
    ld b, a ;Half finished
    
    ld a, c
    and %11000000   ;Extract Y7,6
    .3 rra   ;Move to correct position
    add b   ;All X/Y bits in place
    or %01000000   ;Finish by putting upper bits in
    ld h, a ;Finished address in hl

    pop af   ;Return a

    ld (hl), a  ;Store byte

    ret

    ENDMODULE

/*
    MODULE Long_Adder

/*---------= Variables =---------*/




/*---------= Code =---------*/

Start


    ENDMODULE

*/
