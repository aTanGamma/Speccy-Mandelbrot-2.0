; This file contains maths functions

    MODULE Xor_Byte_Plotter
Start
;   Plots a given byte to the screen at a given line and byte no.

;   Inputs: a = byte to plot
;           b = X (Byte on screen)
;           c = Y (Scanline)

;   Constructs screen address into hl

    push af  ;Push a for safekeeping
    
    ld a, c 
    and %00111000   ;Extract Y5,4,3
    .2 rla   ;Shift to top of byte
    add b   ;Low-byte finished
    ld l, a ; l holds final value

    ld a, c
    and %00000111   ;Extract Y2,1,0
    ld b, a ;Half finished
    
    ld a, c
    and %11000000   ;Extract Y7,6
    .3 rra   ;Move to correct position
    add b   ;All X/Y bits in place
    or %01000000   ;Finish by putting upper bits in
    ld h, a ;Finished address in hl

    pop af   ;Return a

    xor (hl)    ;xor byte in
    ld (hl), a  ;Store byte

    ret

    ENDMODULE


    MODULE Xor_Character
Start
;   Set ix to location of the start of a character
;   Set bc to Screen position as for byte plotter

    ld de, bc
    
    ld a, (ix+0)
    call Xor_Byte_Plotter.Start
    inc e
    ld bc, de

    ld a, (ix+1)
    call Xor_Byte_Plotter.Start
    inc e
    ld bc, de

    ld a, (ix+2)
    call Xor_Byte_Plotter.Start
    inc e
    ld bc, de

    ld a, (ix+3)
    call Xor_Byte_Plotter.Start
    inc e
    ld bc, de

    ld a, (ix+4)
    call Xor_Byte_Plotter.Start
    inc e
    ld bc, de

    ld a, (ix+5)
    call Xor_Byte_Plotter.Start
    inc e
    ld bc, de

    ld a, (ix+6)
    call Xor_Byte_Plotter.Start
    inc e
    ld bc, de

    ld a, (ix+7)
    call Xor_Byte_Plotter.Start
    inc e
    ld bc, de


    ret

    ENDMODULE

    MODULE Table_Mult   ;Uses a table to speed up multiplications
;   Multiplies using Quarter Squares in a table
/*---------= Variables =---------*/
Num_A = $8040   ;2-bytes
Num_B = $8042   ;2-bytes

Result = $8044  ;4-bytes

No_Negs = $8048 ;Byte to determine the sign of ans

Mid_0 = $8050
Mid_1 = $8052
Mid_2 = $8054
Mid_3 = $8056
;Temporary for bracket expansion

SumTable = $9000
DiffTable = $9400

/*---------= Code =---------*/

Start

    ld a, 0
    out (254), a  ;Set border colour Black  (Looks Cooler)

    ld (Result), a
    ld (Result+1), a
    ld (Result+2), a
    ld (Result+3), a

    ld l, 0     ;L will count the number of negative numbers in the next bit
    
Sign_Check_bc   ;Note: A = 0 still

    bit 7, b    ;Check if bc negative; If bit 7 set, Z = 0
    jp z, Sign_Check_de

    inc l       ;Count 1 negative number

    ld a, $FF   ;Setup value to xor with

    xor b       ;xor with FF (get complement)
    ld b, a     ;Return comp to b

    ld a, $FF     ;As above for c
    xor c
    ld c, a

    inc bc      ;Just adds 1 (properly) to bc

Sign_Check_de

    bit 7, d    ;Check if de negative
    jp z, 1F

    inc l       ;Count 1 negative number

    ld a, $FF   ;Setup value to xor with

    xor d       ;xor with FF (get complement)
    ld d, a     ;Return comp to b

    ld a, $FF     ;As above for c
    xor e
    ld e, a

    inc de      ;Just adds 1 (properly) to bc

1   ld a,l
    ld (No_Negs), a

    ld hl, bc
    ld (Num_A), hl

    ld hl, de
    ld (Num_B), de

AaCc_Mult

    ld c, 0 ;Get pointer into SumTable
    ld a, b
    or a
    jr nz, 1F

    ld hl, 0
    ld (Mid_0), hl
    jr AaDd_Mult

1
    ld a, d
    or a
    jr nz, 1F

    ld hl, 0
    ld (Mid_0), hl
    jr AaDd_Mult
1
    add b   ;$Aa + $Cc

    jr nc, 1F
    inc c
1
    sla a
    rl c    ;Double index b/c 16-bit numbers
    
    ld l, a ;Finalised pointer into SumTable
    ld a, $90
    add c
    ld h, a

    ld c, (hl)
    inc hl
    ld b, (hl)  ;Put (little endian) answer into bc

    ld e, 0 ;Get pointer into DiffTable
    ld a, (Num_A+1)
    ld l, a
    ld a, d

    sub l   ;Get A-B
    jr nc, 2F   ;If borrow (carry flag), make -ve

    ld l, $FF
    xor l
    inc a
2
    sla a
    rl e
    
    ld l, a
    ld a, $94
    add e
    ld h, a
    
    ld e, (hl)
    inc hl
    ld d, (hl)  ;Put ((A-B)^2)/4 in de

    ld hl, bc
    
    or a
    sbc hl, de  ;Aa * Cc now in hl

    ld (Mid_0), hl  ;Put Aa * Cc into Mid_0 for later

AaDd_Mult

    ld c, 0   ;Get pointer into SumTable
    ld a, (Num_A+1)

    or a
    jr nz, 1F

    ld hl, 0
    ld (Mid_1), hl
    jr BbCc_Mult
1
    ld l, a
    ld a, (Num_B)

    or a
    jr nz, 1F

    ld hl, 0
    ld (Mid_1), hl
    jr BbCc_Mult
1
    or a
    add l   ;$Aa + $Dd
    jr nc, 1F

    inc c
1
    sla a
    rl c    ;Double index b/c 16-bit numbers
    
    ld l, a ;Finalised pointer into SumTable
    ld a, $90
    add c
    ld h, a

    ld c, (hl)
    inc hl
    ld b, (hl)  ;Put (little endian) answer into bc

    ld e, 0   ;Get pointer into DiffTable
    ld a, (Num_A+1)
    ld l, a
    ld a, (Num_B)

    sub l   ;Get A-B
    jr nc, 2F   ;If borrow (carry flag), make -ve

    ld l, $FF
    xor l
    inc a
2
    sla a
    rl e
    
    ld l, a
    ld a, $94
    add e
    ld h, a
    
    ld e, (hl)
    inc hl
    ld d, (hl)  ;Put ((A-B)^2)/4 in de

    ld hl, bc
    
    or a
    sbc hl, de  ;Aa * Cc now in hl

    ld (Mid_1), hl  ;Put Aa * Dd into Mid_1 for later

BbCc_Mult

    ld c, 0   ;Get pointer into SumTable
    ld a, (Num_A)

    or a
    jr nz, 1F

    ld hl, 0
    ld (Mid_2), hl
    jr BbDd_Mult

1
    ld l, a
    ld a, (Num_B+1)

    or a
    jr nz, 1F

    ld hl, 0
    ld (Mid_2), hl
    jr BbDd_Mult

1
    or a
    add l   ;$Bb + $Cc
    jr nc, 1F

    inc c
1
    sla a
    rl c    ;Double index b/c 16-bit numbers
    
    ld l, a ;Finalised pointer into SumTable
    ld a, $90
    add c
    ld h, a

    ld c, (hl)
    inc hl
    ld b, (hl)  ;Put (little endian) answer into bc

    ld e, 0   ;Get pointer into DiffTable
    ld a, (Num_A)
    ld l, a
    ld a, (Num_B+1)

    sub l   ;Get A-B
    jr nc, 2F   ;If borrow (carry flag), make -ve

    ld l, $FF
    xor l
    inc a
2
    sla a
    rl e
    
    ld l, a
    ld a, $94
    add e
    ld h, a
    
    ld e, (hl)
    inc hl
    ld d, (hl)  ;Put ((A-B)^2)/4 in de

    ld hl, bc
    
    or a
    sbc hl, de  ;Bb * Cc now in hl

    ld (Mid_2), hl  ;Put Bb * Cc into Mid_1 for later

BbDd_Mult

    ld c, 0 ;Get pointer into SumTable
    ld a, (Num_A)

    or a
    jr nz, 1F

    ld hl, 0
    jr Sum_Temp_Answers

1
    ld l, a
    ld a, (Num_B)

    or a
    jr nz, 1F

    ld hl, 0
    jr Sum_Temp_Answers

1
    or a
    add l   ;$Bb + $Dd
    jr nc, 1F

    inc c
1
    sla a
    rl c    ;Double index b/c 16-bit numbers
    
    ld l, a ;Finalised pointer into SumTable
    ld a, $90
    add c
    ld h, a

    ld c, (hl)
    inc hl
    ld b, (hl)  ;Put (little endian) answer into bc

    ld e, 0   ;Get pointer into DiffTable
    ld a, (Num_A)
    ld l, a
    ld a, (Num_B)

    sub l   ;Get A-B
    jr nc, 2F   ;If borrow (carry flag), make -ve

    ld l, $FF
    xor l
    inc a
2
    sla a
    rl e
    
    ld l, a
    ld a, $94
    add e
    ld h, a
    
    ld e, (hl)
    inc hl
    ld d, (hl)  ;Put ((A-B)^2)/4 in de

    ld hl, bc
    
    or a
    sbc hl, de  ;Bb * Dd now in hl

Sum_Temp_Answers

    ld (Result+2), hl ;Store lowest byte in result
    ld hl, (Mid_2)
    ld bc, hl
    ld hl, (Mid_1)
    ld d, 0 ;Keeps tally of carries to top byte


    add hl, bc  ;Add middle partials

    jr nc, 1F

    inc d
1
    ld bc, hl
    
    ld hl, (Result+2)
    ld e, l ;Put lowest byte in e for later

    ld l, h
    ld h, 0 ;Put top byte of bottom partial in l

    add hl, bc  ;Add top byte of Mid_3
    jr nc, 2F

    inc d
2

    ld a, (Mid_0)
    ld b, a
    ld c, 0

    add hl, bc  ;Add LSB of Mid_0 to running total of Result
    jr nc, 3F

    inc d
3
    ld a, (Mid_0 + 1)
    add d

;   Result_0 in a
;   Result_1&2 in hl
;   Result_3 in d

    ld b, a
    ld c, h
    ld d, l

;   Result now in bcde
Shift_Anser
    or a
   
    sla e   ;Shift answer up by 4 bytes to isolate useful bits
    rl d
    rl c
    rl b

    sla e
    rl d
    rl c
    rl b

    sla e
    rl d
    rl c
    rl b

    sla e
    rl d
    rl c
    rl b

Fix_Sign

    ld a, (No_Negs)
    or a
    rr a

    jr nc, Return_Ans

    ld a, $FF
    xor b
    ld b, a

    ld a, $FF
    xor c
    ld c, a

    inc bc  ;Answer in bc now fully ready

Return_Ans

    ld a, 1
    out (254), a  ;Set border colour Blue  (Shows program working)

    ret

    ENDMODULE

    MODULE Fast_Square  ;Pass in number in bc

/*---------= Variables =---------*/

Result = $8040  ;4-bytes

Lo_Byte = $8044
Hi_Byte = $8045

A2 = $8046
B2 = $8048

SumTable = $9000
DiffTable = $9400
SuareTable = $9800

/*---------= Code =---------*/

Start


Make_Num_Pos

    bit 7, b
    jr z, Get_A2

    ld a, $FF
    xor b
    ld b, a

    ld a, $FF
    xor c
    ld c, a

    inc bc  ;Make number +ve

Get_A2

    ld h, $98
    
    ld a, b ;Use b for offset into square table
    sla a   ;Double for 16-bit values
    jr nc, 1F
    inc h
1
    ld l, a
    
    ld a, (hl)  ;Get lo-byte
    ld e, a ;Put in e
    inc hl
    ld a, (hl)  ;Get Hi-byte
    ld d, a ;Put in d
    ld hl, de
    ld (A2), hl ;Store to A^2


Get_B2
    ld h, $98

    ld a, c
    sla a
    jr nc, 1F
    inc h
1
    ld l, a
    
    ld a, (hl)
    ld e, a
    inc hl
    ld a, (hl)
    ld d, a
    ld hl, de
    ld (B2), hl ;As above for B^2

Get_Sum_AB

    ld hl, $9000
    ld de, 0
    ld a, b
    add c
    jr nc, 1F
    inc d
1
    ld e, a
    sla e
    rl d

    or a
    adc hl, de  ;Get final pointer for Aa+Bb

    ld a, (hl)
    ld e, a
    inc hl
    ld a, (hl)
    ld d, a

Get_Diff_AB

    ld hl, $9400

    ld a, b
    sub c
    ld bc, 0    ;Finally don't need bc any more
    jr nc, 1F

    xor $FF
    inc a
1
    ld c, a
    sla c
    rl b    ;Double pointer

    or a
    adc hl, bc
    
    ld a, (hl)
    ld c, a
    inc hl
    ld a, (hl)
    ld b, a

    ld hl, de
    or a
    sbc hl, bc  ;Get AB

    sla l
    rl h    ;Double middle bytes

Compile_Ans

    ld de, hl   ;de = 2AB
    ld hl, B2   ;hl = B^2

    ld a, e
    add h   ;a = Byte 2
    jr nc, 1F
    inc d
1
    ld h, a ;hl = Lowest 2 bytes of result
    ld bc, hl   ;bc = Lowest 2 bytes

    ld hl, (A2) ;hl = A^2
    ld a, d

    add l
    jr nc, 1F
    inc h
1
    ld l, a ;hl = Top short
            ;bc = Bottom short
    
Shift_Ans

    sla c
    rl b
    rl l
    rl h

    sla c
    rl b
    rl l
    rl h

    sla c
    rl b
    rl l
    rl h

    sla c
    rl b
    rl l
    rl h    ;Shift answer up

Return_Ans

    ld b, h
    ld c, l ;put answer in bc

    ret

    org $9000
    INCBIN "./QuarterSquare_Table.bin"

    org $9800
    INCBIN "SquareTable.bin"

    ENDMODULE